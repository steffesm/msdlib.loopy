log host info "host.log"
log board info "board.log"

medium ethernet {
  // USE YOUR BOARDS MAC AND DESIRED IP ADDRESS / PORT HERE ;)
  mac "00:0a:35:01:FB:E3"
  dhcp
  port 8844
}

// disable hardware queues
hwqueue 0

// RNG
core axitworng 1.00.a {
  // list of vhdl sources
  source "vhdl_sources/AxiMst.vhd", "vhdl_sources/AxiSlv.vhd", "vhdl_sources/AxiTwoRng.vhd"
  source "vhdl_sources/RngUniformTausworthe88.vhd"

  // declaration of the components interface
  port in s_axis
  port out m_axis

  // declaration of the components clock and reset ports
  clk aclk 100
  rst aresetn 0
}

instance axitworng 1.00.a rng_a {
  cpu s_axis {
    // since this port is only used to configure the component once, a large queues are not required
    swqueue 8
  }
  cpu m_axis {
    // several values should be cached, but continuous forwarding seems not practicable for a random number generator (except perhaps if values are guaranteed to be consumed faster than they are generated)
    poll 64
  }
}

// enable all currently supported gpio components
gpio leds
gpio buttons
gpio switches {:
  // overrides the default callback method
  // usually, the method forwards a state change to the host-side driver
  // here, the switch state is linked to the led state

:}

//gpio led<3> myleds
//gpio button<5> mutton {:
//
//:}

// some way to specify gpio devices unknown to the driver generator?
// seems dangerous and unwanted - this should lead to extension of the driver generator rather than
// some unchecked gpio component...
//gpio {
//  // direction specifies if gpi/gpo/gpio
//  in/out/dual
//  // pin specifiers (number determines bitwidth of the component)
//  pin U12
//  pin F23
//  pin T22
//} name {:
//
//:}
